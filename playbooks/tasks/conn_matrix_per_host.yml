---
- name: Set host_id and ssh_public_key for this iteration
  ansible.builtin.set_fact:
    host_id: "{{ item.split(',')[0] }}"
    ssh_public_key: "{{ hostvars['localhost']['conn_matrix_pubkeys'][host_name_to_hostname_cmd[item.split(',')[1]]] }}"

- name: "Host id: {{ host_id }} -- Render vm group template"
  template:
    src: vm-group.tmpl.j2
    dest: /tmp/vm-group-{{ host_id }}.tmpl

- name: "Host id: {{ host_id }} -- Create OpenNebula VM Group from template file"
  ansible.builtin.command: onevmgroup create "/tmp/vm-group-{{ host_id }}.tmpl"
  register: vmgroup_create
  changed_when: "'ID' in vmgroup_create.stdout"
  failed_when: vmgroup_create.rc != 0 and (vmgroup_create.rc != 255 or 'NAME is already taken by VMGroup' not in vmgroup_create.stderr)

- name: "Host id: {{ host_id }} -- Render vm template"
  template:
    src: vm.tmpl.j2
    dest: /tmp/vm-on-host-{{ host_id }}.tmpl
  
- name: "Host id: {{ host_id }} -- Read file content into a variable"
  ansible.builtin.slurp:
    src: /tmp/vm-on-host-{{ host_id }}.tmpl
  register: extra_template_content_raw
  no_log: true

- name: "Host id: {{ host_id }} -- Check if VM already exists"
  ansible.builtin.command: onevm list -l ID --csv --filter NAME=conn-mtx-vm-on-host-{{ host_id }} --no-header
  register: existing_vm
  changed_when: false

- name: "Host id: {{ host_id }} -- Instantiate test VM"
  ansible.builtin.command: |
    onetemplate instantiate {{ test_vm_template_id }} --nic {{ _conn_matrix_vnet_name }} \
      --name conn-mtx-vm-on-host-{{ host_id }} --raw '{{
        (extra_template_content_raw.content | b64decode) +
        (validation.test_vm.vm.template_extra if validation.test_vm.vm.template_extra is defined else "")
      }}'
  register: vm_id
  failed_when: "vm_id.rc != 0" 
  when: existing_vm.stdout == ""

- name: "Host id: {{ host_id }} -- Wait for VM come up"
  ansible.builtin.shell: >
    onevm list --f ID={{vm_id.stdout.split(':')[1] | trim}} -l STAT --no-header
  register: vm_state
  failed_when: "vm_state.rc != 0 or 'runn' not in vm_state.stdout"
  until: vm_state.stdout == "runn"
  retries: 10
  delay: 10
  when: existing_vm.stdout == ""
